// hooks/useLLMTrade.js
import { useState } from 'preact/hooks';

const useLLM = (mockDelayMs = 1500) => {
  const [showPreview, setShowPreview] = useState(false);
  const [previewLoading, setPreviewLoading] = useState(false);
  const [llmResponse, setLlmResponse] = useState('');
  const [submitLoading, setSubmitLoading] = useState(false);

  const generateLLMResponse = (tradeData) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const isSuccess = Math.random() > 0.2; // 80% success rate
        
        if (isSuccess) {
          const response = `
**Stock:** ${tradeData.tickerSymbol}
**Name:** ${tradeData.stockName}
**Type:** ${tradeData.type.toUpperCase()}
**Entry Price:** ${tradeData.price?.main || tradeData.exitPrice}
${tradeData.stopLoss ? `**Stop Loss:** ${tradeData.stopLoss}\n` : ''}
${tradeData.targets ? `**Targets:** ${Array.isArray(tradeData.targets) ? tradeData.targets.join(', ') : tradeData.targets}\n` : ''}
**Time Period:** ${tradeData.timePeriod}
**RA Notes:** ${tradeData.notes || 'Generated by LLM'}`;
          resolve(response);
        } else {
          reject(new Error('Failed to generate preview. Please try again.'));
        }
      }, mockDelayMs);
    });
  };

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Copied to clipboard!');
      return true;
    } catch (err) {
      console.error('Failed to copy:', err);
      alert('Failed to copy to clipboard.');
      return false;
    }
  };

  const handlePreview = async (tradeData) => {
    setShowPreview(true);
    setPreviewLoading(true);
    setLlmResponse('');

    try {
      const response = await generateLLMResponse(tradeData);
      setLlmResponse(response);
      return response;
    } catch (error) {
      console.error(error);
      setLlmResponse('Error: ' + error.message);
      throw error;
    } finally {
      setPreviewLoading(false);
    }
  };

  const handleSubmit = async (tradeData, onSuccess) => {
    setSubmitLoading(true);
    try {
      const response = await generateLLMResponse(tradeData);
      await copyToClipboard(response);
      if (onSuccess) onSuccess(response);
      return response;
    } catch (error) {
      console.error('Error submitting trade:', error);
      throw error;
    } finally {
      setSubmitLoading(false);
      setShowPreview(false);
    }
  };

  return {
    showPreview,
    setShowPreview,
    previewLoading,
    submitLoading,
    llmResponse,
    handlePreview,
    handleSubmit
  };
};

export default useLLM;